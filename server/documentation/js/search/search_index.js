var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.199,1,1.858]],["body/controllers/AppController.html",[0,1.891,1,2.931,2,1.668,3,0.492,4,0.424,5,0.424,6,3.098,7,0.565,8,1.709,9,4.465,10,1.854,11,0.039,12,0.902,13,3.763,14,1.36,15,1.396,16,0.618,17,0.723,18,2.547,19,3.098,20,0.492,21,0.127,22,2.072,23,3.763,24,1.36,25,3.763,26,0.031,27,0.031]],["title/modules/AppModule.html",[28,1.083,29,1.858]],["body/modules/AppModule.html",[1,2.893,2,1.826,3,0.399,4,0.343,5,0.343,11,0.039,16,0.704,17,0.585,18,2.652,19,2.508,20,0.399,21,0.102,26,0.027,27,0.027,28,1.687,29,3.614,30,1.35,31,1.35,32,1.677,33,1.677,34,1.35,35,2.569,36,1.677,37,2.508,38,2.508,39,2.508,40,2.964,41,2.964,42,2.386,43,2.268,44,1.677,45,1.501,46,3.047,47,2.912,48,3.047,49,3.047,50,2.154,51,3.047]],["title/injectables/AppService.html",[18,1.477,52,0.719]],["body/injectables/AppService.html",[3,0.517,4,0.445,5,0.445,7,0.594,8,1.763,9,4.545,11,0.039,12,0.949,14,1.43,15,1.44,16,0.517,17,0.76,18,2.403,20,0.517,21,0.133,24,1.43,26,0.032,27,0.032,52,1.17,53,1.753,54,3.257,55,3.956,56,3.956,57,3.956]],["title/controllers/AuthController.html",[0,1.199,58,1.858]],["body/controllers/AuthController.html",[0,0.949,2,1.052,3,0.31,4,0.267,5,0.267,7,0.356,8,1.249,10,2.009,11,0.039,12,0.978,14,1.473,16,0.623,17,0.456,20,0.31,21,0.08,22,1.307,24,1.473,26,0.022,27,0.022,58,2.143,59,1.954,60,1.954,61,2.373,62,3.457,63,2.448,64,2.846,65,2.846,66,2.373,67,2.735,68,2.373,69,2.373,70,1.807,71,1.473,72,1.086,73,1.63,74,2.207,75,2.373,76,2.448,77,2.373,78,3.365,79,2.373,80,2.143,81,2.373,82,2.448,83,2.373,84,2.373,85,1.678,86,1.678,87,1.678,88,1.678,89,1.678,90,2.443,91,2.009,92,1.954,93,1.471,94,1.169,95,1.678,96,1.678,97,2.373,98,2.373,99,2.373,100,2.443,101,3.457,102,2.143,103,2.373,104,1.903,105,1.63,106,1.471,107,2.373,108,2.373,109,2.373,110,2.373,111,2.373,112,2.373,113,2.373,114,2.373,115,2.373,116,1.678,117,2.373,118,2.373,119,2.373,120,1.471,121,1.903,122,2.373]],["title/modules/AuthModule.html",[28,1.083,40,1.65]],["body/modules/AuthModule.html",[2,1.698,3,0.359,4,0.309,5,0.309,11,0.039,16,0.714,17,0.526,20,0.501,21,0.092,26,0.025,27,0.025,28,1.596,30,1.215,31,1.215,32,1.509,33,1.509,34,1.215,35,2.431,36,2.431,40,3.126,42,2.371,43,2.109,44,1.509,45,1.351,47,2.708,50,1.938,58,2.738,91,2.823,92,2.257,104,2.109,123,2.257,124,2.742,125,2.257,126,2.257,127,2.869,128,1.938,129,2.742,130,2.742,131,1.938,132,3.831,133,1.7,134,2.742,135,1.938,136,2.257,137,1.938,138,1.938,139,2.257,140,2.257,141,2.257,142,2.742]],["title/injectables/AuthService.html",[52,0.719,91,1.477]],["body/injectables/AuthService.html",[3,0.207,4,0.178,5,0.178,7,0.238,8,0.917,11,0.039,12,1.066,14,1.53,15,1.711,16,0.519,17,0.304,20,0.207,21,0.053,24,1.53,26,0.016,27,0.016,52,0.608,53,0.702,63,2.609,64,2.088,65,2.088,70,1.876,71,1.952,72,1.269,73,1.693,80,2.46,90,1.12,91,1.25,104,2.33,105,1.693,106,2.46,120,1.967,121,1.746,131,1.12,143,1.304,144,2.537,145,3.627,146,2.537,147,2.537,148,1.25,149,1.584,150,4.233,151,2.986,152,1.607,153,1.584,154,2.537,155,3.151,156,1.584,157,2.69,158,1.584,159,2.537,160,1.584,161,2.537,162,2.242,163,1.584,164,2.537,165,1.584,166,2.537,167,1.584,168,1.584,169,2.088,170,1.304,171,0.872,172,2.537,173,1.304,174,3.172,175,1.584,176,2.537,177,1.584,178,1.584,179,1.304,180,1.584,181,1.014,182,1.573,183,1.304,184,2.612,185,1.584,186,1.584,187,1.584,188,1.584,189,1.584,190,1.584,191,1.584,192,1.584,193,1.584,194,1.584,195,1.584,196,1.584,197,1.584,198,0.982,199,0.982,200,0.982,201,0.982,202,0.872,203,0.982,204,1.584,205,1.584,206,1.584,207,2.537,208,1.584,209,1.584,210,2.537,211,1.304,212,0.982,213,1.304,214,0.982,215,1.584,216,1.584]],["title/injectables/JwtAuthGuard.html",[52,0.719,94,1.477]],["body/injectables/JwtAuthGuard.html",[3,0.409,4,0.352,5,0.352,7,0.469,8,1.515,11,0.039,12,1.005,14,1.515,16,0.548,17,0.6,20,0.409,21,0.105,24,1.709,26,0.027,27,0.027,52,1.005,53,1.385,70,1.857,71,1.515,72,0.833,73,1.676,90,2.962,94,2.065,105,2.107,120,1.937,121,1.72,133,1.937,198,1.937,199,1.937,200,1.937,201,1.937,202,1.72,203,1.937,217,3.893,218,2.573,219,2.065,220,4.191,221,4.191,222,4.191,223,4.191,224,5.052,225,3.125,226,3.125,227,4.191,228,3.125,229,4.191,230,3.125,231,3.125,232,3.125]],["title/injectables/JwtStrategy.html",[52,0.719,127,1.65]],["body/injectables/JwtStrategy.html",[3,0.401,4,0.346,5,0.346,7,0.46,8,1.496,11,0.039,12,0.993,14,1.109,15,1.593,16,0.613,17,0.589,20,0.401,21,0.103,24,1.109,26,0.027,27,0.027,52,0.993,53,1.36,70,1.36,71,1.812,72,1.248,73,1.227,95,2.169,127,2.279,133,1.902,137,2.169,138,2.169,148,2.308,157,2.579,162,2.926,181,1.655,211,2.527,213,2.527,219,2.04,233,2.527,234,4.14,235,4.14,236,3.069,237,4.14,238,3.069,239,3.069,240,3.069,241,3.069,242,2.527,243,3.069,244,3.069,245,3.069,246,3.069,247,3.069,248,3.069,249,3.069]],["title/classes/LoginDto.html",[21,0.101,76,1.477]],["body/classes/LoginDto.html",[3,0.39,4,0.336,5,0.336,7,0.447,10,2.001,11,0.039,12,0.974,15,1.645,16,0.39,20,0.604,21,0.167,26,0.026,27,0.026,71,1.668,72,1.082,74,2.001,76,2.275,82,1.469,105,1.193,148,1.469,155,3.214,157,2.728,181,1.193,182,1.849,212,1.849,214,1.849,219,1.469,250,1.642,251,1.849,252,1.8,253,3.263,254,2.983,255,2.455,256,2.862,257,2.517,258,2.862,259,2.862,260,2.983,261,2.862,262,1.849,263,1.642,264,2.108,265,2.108,266,2.108,267,2.108,268,2.108,269,2.108]],["title/controllers/PostController.html",[0,1.199,270,1.65]],["body/controllers/PostController.html",[0,0.74,2,0.82,3,0.242,4,0.208,5,0.208,7,0.278,8,1.036,10,2.228,11,0.039,12,1.085,14,1.634,15,1.599,16,0.559,17,0.355,20,0.242,21,0.062,22,1.019,24,1.634,26,0.019,27,0.019,60,1.524,63,2.604,67,1.019,70,1.895,71,1.545,72,1.257,73,1.71,78,2.48,80,2.45,85,2.026,86,3.785,87,2.48,88,1.308,89,1.308,93,1.147,94,0.912,96,1.308,100,1.308,102,1.147,105,1.403,116,2.48,162,2.026,171,1.019,181,1.949,198,1.147,199,1.147,200,1.147,201,1.147,202,1.019,203,1.147,270,1.578,271,1.308,272,1.851,273,2.36,274,2.36,275,2.36,276,2.793,277,2.36,278,2.36,279,1.851,280,2.36,281,1.851,282,1.851,283,2.889,284,2.597,285,1.851,286,1.851,287,1.524,288,1.851,289,1.851,290,1.851,291,1.524,292,2.36,293,1.851,294,1.524,295,1.851,296,1.851,297,1.524,298,1.524,299,1.524,300,1.555,301,1.308,302,1.524,303,1.524,304,2.36,305,1.524,306,1.019,307,1.524,308,1.524,309,1.524,310,1.524,311,1.524,312,1.524,313,1.524,314,2.889,315,1.524,316,1.524,317,1.524,318,1.524,319,1.524,320,1.524,321,1.524,322,1.524,323,1.524,324,1.147,325,1.308,326,1.524,327,1.524]],["title/classes/PostDto.html",[21,0.101,284,1.65]],["body/classes/PostDto.html",[3,0.397,4,0.342,5,0.342,7,0.455,10,2.025,11,0.039,12,0.986,15,1.474,16,0.397,20,0.397,21,0.138,26,0.027,27,0.027,72,1.095,250,1.671,252,1.821,256,3.467,258,3.467,259,3.334,261,2.888,262,1.882,263,1.671,284,2.262,324,3.409,328,2.499,329,4.527,330,3.036,331,4.11,332,3.036,333,4.11,334,3.036,335,3.036,336,4.11,337,3.036,338,4.11,339,3.036,340,3.036,341,3.036,342,3.036,343,3.036,344,3.036]],["title/modules/PostModule.html",[28,1.083,41,1.65]],["body/modules/PostModule.html",[2,1.954,3,0.441,4,0.38,5,0.38,11,0.039,16,0.681,17,0.648,20,0.441,21,0.113,26,0.029,27,0.029,28,1.775,30,1.495,31,1.495,32,1.857,33,1.857,34,1.495,35,2.703,36,1.857,41,3.152,42,2.456,43,2.427,44,1.857,45,1.662,47,3.116,50,2.385,270,2.703,300,2.456,301,2.385,345,2.778,346,3.374,347,2.778,348,3.374,349,3.374]],["title/injectables/PostService.html",[52,0.719,300,1.329]],["body/injectables/PostService.html",[3,0.235,4,0.202,5,0.202,7,0.269,8,1.012,11,0.04,12,1.119,14,1.614,15,1.743,16,0.45,17,0.345,20,0.235,21,0.06,22,0.989,24,1.614,26,0.018,27,0.018,52,0.672,53,0.796,63,2.745,70,1.98,71,1.614,72,1.19,73,1.786,80,2.769,102,2.134,104,0.989,106,1.113,120,1.736,121,0.989,148,0.885,151,2.306,152,1.723,170,1.478,173,1.478,179,2.834,181,1.786,183,1.478,184,2.834,273,2.306,274,2.306,275,2.306,276,2.749,277,2.306,278,2.306,287,2.306,291,2.306,294,2.306,300,1.241,324,3.253,325,2.749,329,3.678,350,1.478,351,1.796,352,1.796,353,2.801,354,1.796,355,2.801,356,2.801,357,3.889,358,1.796,359,1.796,360,1.796,361,1.796,362,1.796,363,1.796,364,2.801,365,1.796,366,1.796,367,1.796,368,2.801,369,1.98,370,1.796,371,1.796,372,1.796,373,1.796,374,1.796,375,1.796,376,1.796,377,1.796,378,1.796,379,1.796]],["title/modules/PrismaModule.html",[28,1.083,42,1.329]],["body/modules/PrismaModule.html",[3,0.467,4,0.402,5,0.402,11,0.038,16,0.598,17,0.686,20,0.467,21,0.12,26,0.03,27,0.03,28,1.824,30,1.583,31,1.583,32,1.967,33,1.967,34,1.583,35,2.778,36,2.778,42,2.536,43,2.519,44,1.967,45,1.76,152,2.646,380,2.942,381,2.942,382,2.942,383,3.573,384,3.573]],["title/injectables/PrismaService.html",[52,0.719,152,1.329]],["body/injectables/PrismaService.html",[3,0.456,4,0.392,5,0.392,7,0.523,8,1.627,11,0.039,12,1.08,14,1.627,16,0.589,17,0.669,20,0.456,21,0.117,26,0.029,27,0.029,52,1.08,53,1.544,63,2.754,106,2.791,152,1.995,171,1.918,219,2.218,385,2.869,386,4.988,387,5.59,388,5.59,389,3.485,390,3.485,391,3.485,392,3.485,393,3.485]],["title/classes/RegisterDto.html",[21,0.101,82,1.477]],["body/classes/RegisterDto.html",[3,0.363,4,0.313,5,0.313,7,0.417,10,2.191,11,0.039,12,1.067,15,1.642,16,0.363,20,0.582,21,0.162,26,0.025,27,0.025,71,1.892,72,1.185,74,1.905,76,2.491,82,1.905,105,1.111,148,1.368,155,3.134,157,2.647,181,1.111,182,1.722,212,1.722,214,1.722,219,1.905,250,1.529,251,1.722,252,1.713,253,3.144,255,2.287,256,2.981,257,2.397,258,2.981,259,2.981,261,2.757,262,1.722,263,1.529,264,1.963,265,1.963,266,2.733,267,1.963,268,1.963,269,1.963,394,2.778,395,2.778,396,3.866,397,2.778,398,2.778]],["title/interfaces/Request.html",[67,1.65,306,1.65]],["body/interfaces/Request.html",[0,0.999,3,0.327,4,0.281,5,0.281,7,0.375,11,0.039,15,1.493,16,0.635,17,0.48,20,0.327,21,0.084,22,1.376,24,1.828,26,0.023,27,0.023,63,2.26,67,1.975,72,0.666,73,1.435,78,2.536,85,2.536,86,3.682,87,2.536,88,1.767,89,1.767,93,1.549,94,1.231,96,1.767,100,1.767,102,1.549,105,2.131,116,2.967,171,1.376,181,1.834,198,1.549,199,1.549,200,1.549,201,1.549,202,1.376,203,1.549,252,1.59,270,1.376,271,1.767,276,1.767,280,2.058,283,2.058,284,2.311,292,2.058,297,2.058,298,2.058,299,2.058,300,1.86,301,1.767,302,2.058,303,2.058,304,2.954,305,2.058,306,1.376,307,2.058,308,2.058,309,2.058,310,2.058,311,2.058,312,2.058,313,2.058,314,3.456,315,2.058,316,2.058,317,2.058,318,2.058,319,2.058,320,2.058,321,2.058,322,2.058,323,2.058,324,1.549,325,1.767,326,2.058,327,2.058,399,2.499]],["title/classes/UserDto.html",[21,0.101,74,1.477]],["body/classes/UserDto.html",[3,0.379,4,0.327,5,0.327,7,0.435,11,0.039,12,1.175,15,1.658,16,0.379,20,0.595,21,0.165,26,0.026,27,0.026,70,1.286,71,1.917,72,1.305,73,1.16,74,2.53,76,1.963,82,1.429,105,1.593,148,1.963,155,2.47,157,2.697,181,1.82,182,1.798,212,1.798,214,1.798,219,1.429,250,1.597,251,1.798,252,1.766,253,2.816,256,2.47,257,1.798,258,2.47,259,2.47,261,2.821,262,1.798,263,1.597,264,2.051,265,2.051,266,2.051,267,2.051,268,2.051,269,2.051,400,2.901,401,3.984,402,2.901,403,2.901]],["title/coverage.html",[404,2.88]],["body/coverage.html",[0,1.843,1,1.842,5,0.335,6,2.447,11,0.039,18,1.464,21,0.166,26,0.026,27,0.026,34,1.317,52,1.282,54,2.447,58,1.842,59,2.447,67,1.636,72,0.792,74,1.464,76,1.464,82,1.464,91,1.464,94,1.464,121,1.636,127,1.636,128,2.101,135,2.101,143,2.447,152,1.317,217,2.447,218,2.447,233,2.447,251,2.857,270,1.636,271,2.863,284,1.636,300,1.317,306,1.636,328,2.447,350,2.447,385,2.447,404,2.101,405,2.447,406,2.972,407,2.972,408,5.936,409,4.608,410,4.051,411,5.179,412,2.972,413,2.972,414,4.051,415,4.051,416,2.447,417,2.972,418,2.972,419,2.972,420,2.972]],["title/dependencies.html",[31,1.596,421,2.068]],["body/dependencies.html",[11,0.039,17,0.704,21,0.156,26,0.03,27,0.03,31,1.624,93,2.272,95,3.287,131,2.591,133,2.272,169,3.018,171,2.018,242,3.829,263,2.018,422,5.108,423,3.666,424,3.666,425,3.666,426,3.666,427,3.666,428,3.666,429,3.666,430,3.666,431,4.65,432,3.666,433,3.666,434,3.666,435,3.666,436,3.666,437,3.666,438,3.666,439,3.666,440,3.666,441,3.666]],["title/miscellaneous/functions.html",[442,1.557,443,2.965]],["body/miscellaneous/functions.html",[7,0.679,11,0.034,26,0.034,27,0.034,34,2.483,416,3.726,442,2.806,443,3.726,444,4.526]],["title/index.html",[7,0.377,445,2.512,446,2.512]],["body/index.html",[4,0.228,11,0.037,26,0.02,27,0.02,45,2.308,202,1.113,369,1.43,404,1.43,405,2.527,447,2.023,448,2.023,449,3.709,450,3.069,451,2.023,452,2.023,453,2.023,454,2.023,455,3.069,456,1.665,457,3.709,458,2.023,459,2.023,460,4.14,461,2.023,462,4.14,463,5.015,464,2.023,465,4.868,466,2.023,467,2.023,468,2.023,469,3.069,470,2.023,471,3.069,472,2.023,473,3.709,474,2.023,475,3.069,476,2.023,477,2.023,478,2.023,479,2.023,480,2.023,481,4.14,482,5.015,483,4.685,484,2.023,485,3.069,486,2.023,487,2.023,488,2.023,489,2.023,490,2.023,491,4.685,492,3.069,493,4.14,494,2.023,495,3.069,496,2.023,497,2.023,498,3.069,499,4.685,500,4.14,501,2.023,502,3.069,503,2.023,504,2.023,505,2.023,506,2.023,507,4.14,508,2.023,509,2.023,510,2.023,511,2.023,512,3.069,513,2.023,514,2.023,515,2.023,516,2.023,517,2.023,518,3.069,519,2.023,520,2.023,521,2.023,522,3.069,523,2.023,524,2.023,525,3.408,526,3.069,527,2.023,528,2.023,529,2.023,530,2.023,531,2.023,532,2.023,533,2.023,534,2.023,535,3.069,536,2.023,537,2.023,538,2.023,539,2.023,540,3.709,541,2.023,542,2.023,543,2.023,544,2.023,545,2.023,546,2.023,547,3.069,548,2.023,549,2.023,550,2.023,551,2.023,552,2.023,553,3.069,554,2.023,555,2.023,556,2.023,557,3.069,558,3.069,559,2.023,560,2.023,561,2.023,562,2.023,563,2.023,564,2.023,565,2.023,566,2.023,567,2.023,568,2.023,569,2.023,570,2.023,571,2.023,572,2.023,573,2.023,574,2.023,575,2.023,576,1.665]],["title/modules.html",[30,1.806]],["body/modules.html",[11,0.033,26,0.033,27,0.033,29,2.624,30,1.876,40,2.33,41,2.33,42,1.876,525,4.651,577,5.649,578,5.649,579,5.649]],["title/overview.html",[580,3.355]],["body/overview.html",[2,1.331,11,0.038,18,2.283,26,0.026,27,0.026,28,1.086,29,3.546,30,1.331,31,1.331,32,1.653,33,1.653,34,1.331,35,1.653,36,1.653,37,2.473,38,2.473,39,2.473,40,3.149,41,3.019,42,2.473,43,2.246,44,1.653,45,1.48,53,1.331,91,2.702,123,2.473,125,2.473,126,2.473,127,2.551,152,2.43,250,1.653,257,1.862,300,2.053,306,1.653,345,2.473,347,2.473,380,2.473,381,2.473,382,2.473,580,2.473,581,4.08,582,3.004,583,3.004]],["title/properties.html",[252,1.596,421,2.068]],["body/properties.html",[11,0.038,26,0.034,27,0.034,252,1.974,369,3.149,456,3.667,576,3.667,584,4.455,585,4.455,586,4.455]],["title/miscellaneous/variables.html",[442,1.557,587,2.965]],["body/miscellaneous/variables.html",[7,0.632,11,0.039,26,0.033,27,0.033,104,2.318,128,2.977,135,3.582,136,3.467,137,2.977,138,2.977,139,3.467,140,3.467,141,3.467,442,2.611,587,3.467,588,4.212,589,4.212,590,4.212]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":585,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":583,"title":{},"body":{"overview.html":{}}}],["10",{"_index":336,"title":{},"body":{"classes/PostDto.html":{}}}],["11.0.0",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["2",{"_index":266,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["3",{"_index":582,"title":{},"body":{"overview.html":{}}}],["4",{"_index":581,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":338,"title":{},"body":{"classes/PostDto.html":{}}}],["500",{"_index":333,"title":{},"body":{"classes/PostDto.html":{}}}],["6",{"_index":257,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["6.5.0",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":331,"title":{},"body":{"classes/PostDto.html":{}}}],["7.8.1",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowing",{"_index":513,"title":{},"body":{"index.html":{}}}],["already",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":563,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":483,"title":{},"body":{"index.html":{}}}],["applications",{"_index":455,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"interfaces/Request.html":{}}}],["auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["auth.guard.ts",{"_index":218,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":228,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":225,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":302,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":230,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":220,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":369,"title":{},"body":{"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":357,"title":{},"body":{"injectables/PostService.html":{}}}],["authservice",{"_index":91,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{}}}],["aws",{"_index":502,"title":{},"body":{"index.html":{}}}],["backers",{"_index":564,"title":{},"body":{"index.html":{}}}],["based",{"_index":497,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["board",{"_index":556,"title":{},"body":{"index.html":{}}}],["body",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["body.commenter",{"_index":327,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["body.content",{"_index":314,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["body.title",{"_index":319,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":579,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":577,"title":{},"body":{"modules.html":{}}}],["building",{"_index":450,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":221,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":223,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["catch",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["channel",{"_index":528,"title":{},"body":{"index.html":{}}}],["characters",{"_index":258,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["check",{"_index":491,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":250,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["clicks",{"_index":512,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":496,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":345,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":346,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":347,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":380,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":381,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":382,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["come",{"_index":519,"title":{},"body":{"index.html":{}}}],["comment",{"_index":371,"title":{},"body":{"injectables/PostService.html":{}}}],["commenter",{"_index":325,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{}}}],["conflictexception",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('the",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PostService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["constructor(jwtservice",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prisma",{"_index":351,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{}}}],["constructor(user",{"_index":400,"title":{},"body":{"classes/UserDto.html":{}}}],["content",{"_index":324,"title":{},"body":{"controllers/PostController.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{}}}],["context",{"_index":226,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["controller('auth",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":307,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["courses",{"_index":534,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":404,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createcomment",{"_index":273,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createcomment(@param('id",{"_index":323,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["createcomment(id",{"_index":279,"title":{},"body":{"controllers/PostController.html":{}}}],["createcomment(postid",{"_index":353,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost",{"_index":274,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@req",{"_index":312,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["createpost(req",{"_index":282,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(title",{"_index":356,"title":{},"body":{"injectables/PostService.html":{}}}],["createuser",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser(email",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["declare",{"_index":305,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{}}}],["deeper",{"_index":530,"title":{},"body":{"index.html":{}}}],["default",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["delete",{"_index":298,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["delete(':id",{"_index":320,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["deletepost",{"_index":275,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletepost(@param('id",{"_index":321,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["deletepost(id",{"_index":287,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":481,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":501,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":492,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":511,"title":{},"body":{"index.html":{}}}],["description",{"_index":456,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":466,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":542,"title":{},"body":{"index.html":{}}}],["disable",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["discord",{"_index":527,"title":{},"body":{"index.html":{}}}],["dive",{"_index":529,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":405,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["e",{"_index":374,"title":{},"body":{"injectables/PostService.html":{}}}],["e.code",{"_index":375,"title":{},"body":{"injectables/PostService.html":{}}}],["e2e",{"_index":476,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":451,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":489,"title":{},"body":{"index.html":{}}}],["email",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["ensure",{"_index":487,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":546,"title":{},"body":{"index.html":{}}}],["err",{"_index":229,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["error('an",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["eslint/no",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["example",{"_index":462,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":224,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["experience",{"_index":532,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["express",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["express.request",{"_index":283,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["extends",{"_index":219,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["extractjwt",{"_index":240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fast",{"_index":505,"title":{},"body":{"index.html":{}}}],["features",{"_index":515,"title":{},"body":{"index.html":{}}}],["few",{"_index":507,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["findall",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserbyemail",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserbyemail(email",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["focus",{"_index":514,"title":{},"body":{"index.html":{}}}],["follow",{"_index":550,"title":{},"body":{"index.html":{}}}],["found",{"_index":378,"title":{},"body":{"injectables/PostService.html":{}}}],["framework",{"_index":449,"title":{},"body":{"index.html":{}}}],["full",{"_index":545,"title":{},"body":{"index.html":{}}}],["function",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":443,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":510,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":292,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["get('me",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me')@useguards(jwtauthguard",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["getallposts",{"_index":276,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{}}}],["getauthenticateduser",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthenticateduser(@req",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthenticateduser(request",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostbyid",{"_index":277,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getpostbyid(@param('id",{"_index":309,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["getpostbyid(id",{"_index":291,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["getting",{"_index":445,"title":{"index.html":{}},"body":{}}],["graph",{"_index":537,"title":{},"body":{"index.html":{}}}],["grow",{"_index":560,"title":{},"body":{"index.html":{}}}],["handlerequest",{"_index":222,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":227,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hands",{"_index":531,"title":{},"body":{"index.html":{}}}],["handy",{"_index":520,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":535,"title":{},"body":{"index.html":{}}}],["here",{"_index":568,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":573,"title":{},"body":{"index.html":{}}}],["id",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["identifier",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":391,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["include",{"_index":368,"title":{},"body":{"injectables/PostService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["information",{"_index":494,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":517,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":396,"title":{},"body":{"classes/RegisterDto.html":{}}}],["injectable",{"_index":52,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"coverage.html":{}}}],["injectables",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"overview.html":{}}}],["install",{"_index":509,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":464,"title":{},"body":{"index.html":{}}}],["interact",{"_index":538,"title":{},"body":{"index.html":{}}}],["interface",{"_index":306,"title":{"interfaces/Request.html":{}},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":399,"title":{},"body":{"interfaces/Request.html":{}}}],["isemail",{"_index":253,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isstring",{"_index":261,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isstring()@minlength(10",{"_index":335,"title":{},"body":{"classes/PostDto.html":{}}}],["isstring()@minlength(2",{"_index":394,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@minlength(50",{"_index":330,"title":{},"body":{"classes/PostDto.html":{}}}],["isstring()@minlength(6",{"_index":255,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["job",{"_index":553,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":555,"title":{},"body":{"index.html":{}}}],["join",{"_index":566,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":94,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":127,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":570,"title":{},"body":{"index.html":{}}}],["key",{"_index":484,"title":{},"body":{"index.html":{}}}],["learn",{"_index":523,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["license",{"_index":576,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":558,"title":{},"body":{"index.html":{}}}],["line",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["linkedin",{"_index":552,"title":{},"body":{"index.html":{}}}],["literal",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{}}}],["login",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":76,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto:5",{"_index":397,"title":{},"body":{"classes/RegisterDto.html":{}}}],["logindto:9",{"_index":398,"title":{},"body":{"classes/RegisterDto.html":{}}}],["long",{"_index":259,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["long'})@maxlength(50",{"_index":337,"title":{},"body":{"classes/PostDto.html":{}}}],["long'})@maxlength(500",{"_index":332,"title":{},"body":{"classes/PostDto.html":{}}}],["looking",{"_index":495,"title":{},"body":{"index.html":{}}}],["loop",{"_index":548,"title":{},"body":{"index.html":{}}}],["makes",{"_index":503,"title":{},"body":{"index.html":{}}}],["managing",{"_index":516,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":499,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":340,"title":{},"body":{"classes/PostDto.html":{}}}],["maxlength(50",{"_index":342,"title":{},"body":{"classes/PostDto.html":{}}}],["maxlength(500",{"_index":344,"title":{},"body":{"classes/PostDto.html":{}}}],["message",{"_index":256,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["metadata",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{}}}],["minlength",{"_index":262,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["minlength(10",{"_index":341,"title":{},"body":{"classes/PostDto.html":{}}}],["minlength(2",{"_index":265,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["minlength(50",{"_index":343,"title":{},"body":{"classes/PostDto.html":{}}}],["minlength(6",{"_index":264,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["miscellaneous",{"_index":442,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":557,"title":{},"body":{"index.html":{}}}],["mode",{"_index":469,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":493,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":571,"title":{},"body":{"index.html":{}}}],["name",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["namespace",{"_index":304,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["need",{"_index":543,"title":{},"body":{"index.html":{}}}],["nest",{"_index":457,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":575,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":482,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["next",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["node.js",{"_index":448,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":363,"title":{},"body":{"injectables/PostService.html":{}}}],["notfoundexception('post",{"_index":377,"title":{},"body":{"injectables/PostService.html":{}}}],["occurred",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["offer",{"_index":554,"title":{},"body":{"index.html":{}}}],["official",{"_index":500,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":387,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":388,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":559,"title":{},"body":{"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":580,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["p2025",{"_index":376,"title":{},"body":{"injectables/PostService.html":{}}}],["package",{"_index":421,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":299,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["parameters",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UserDto.html":{}}}],["part",{"_index":544,"title":{},"body":{"index.html":{}}}],["passport",{"_index":242,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["patch",{"_index":297,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["patch(':id",{"_index":316,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["payload",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.name",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["platform",{"_index":498,"title":{},"body":{"index.html":{}}}],["please",{"_index":526,"title":{},"body":{"index.html":{}}}],["possible",{"_index":490,"title":{},"body":{"index.html":{}}}],["post",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["post(':id/comments",{"_index":280,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["post('login",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@usepipes(new",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@usepipes(new",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.controller",{"_index":349,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":303,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["post.service",{"_index":301,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"interfaces/Request.html":{}}}],["post/post.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":270,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["postdto",{"_index":284,"title":{"classes/PostDto.html":{}},"body":{"controllers/PostController.html":{},"classes/PostDto.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["postid",{"_index":355,"title":{},"body":{"injectables/PostService.html":{}}}],["postmodule",{"_index":41,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":272,"title":{},"body":{"controllers/PostController.html":{}}}],["postservice",{"_index":300,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["prisma",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["prisma.prismaclientknownrequesterror).code",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma.service",{"_index":384,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PrismaService.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":365,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma/prisma.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["prisma/prisma.service",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["prismaclient",{"_index":386,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":364,"title":{},"body":{"injectables/PostService.html":{}}}],["prismamodule",{"_index":42,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":152,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_secret",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":471,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":447,"title":{},"body":{"index.html":{}}}],["project",{"_index":460,"title":{},"body":{"index.html":{}}}],["properties",{"_index":252,"title":{"properties.html":{}},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["questions",{"_index":524,"title":{},"body":{"index.html":{}}}],["read",{"_index":567,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["ready",{"_index":480,"title":{},"body":{"index.html":{}}}],["real",{"_index":539,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(email",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(registerdto",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":82,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["registerdto.name",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto.password",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["repository",{"_index":459,"title":{},"body":{"index.html":{}}}],["req",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["req.user!.id",{"_index":315,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["request",{"_index":67,"title":{"interfaces/Request.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["request.user",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["requiring",{"_index":506,"title":{},"body":{"index.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["resources",{"_index":518,"title":{},"body":{"index.html":{}}}],["result",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{}}}],["run",{"_index":465,"title":{},"body":{"index.html":{}}}],["runs",{"_index":488,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":452,"title":{},"body":{"index.html":{}}}],["secret",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secret_key",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":453,"title":{},"body":{"index.html":{}}}],["setup",{"_index":461,"title":{},"body":{"index.html":{}}}],["side",{"_index":454,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["simple",{"_index":508,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"index.html":{}}}],["sponsors",{"_index":562,"title":{},"body":{"index.html":{}}}],["src/.../auth.module.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":444,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.dto.ts",{"_index":251,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["src/auth/auth.dto.ts:15",{"_index":395,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/auth.dto.ts:19",{"_index":402,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/auth.dto.ts:20",{"_index":403,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/auth.dto.ts:21",{"_index":401,"title":{},"body":{"classes/UserDto.html":{}}}],["src/auth/auth.dto.ts:5",{"_index":254,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/auth.dto.ts:9",{"_index":260,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/auth.module.ts",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:17",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":217,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":238,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:6",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/main.ts",{"_index":416,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/post.controller.ts",{"_index":271,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:19",{"_index":290,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:24",{"_index":293,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:31",{"_index":286,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:37",{"_index":296,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:43",{"_index":289,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:48",{"_index":281,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.dto.ts",{"_index":328,"title":{},"body":{"classes/PostDto.html":{},"coverage.html":{}}}],["src/post/post.dto.ts:12",{"_index":334,"title":{},"body":{"classes/PostDto.html":{}}}],["src/post/post.dto.ts:7",{"_index":339,"title":{},"body":{"classes/PostDto.html":{}}}],["src/post/post.module.ts",{"_index":348,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/post.service.ts",{"_index":350,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/post.service.ts:15",{"_index":360,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:19",{"_index":361,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:23",{"_index":362,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:30",{"_index":359,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:42",{"_index":354,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:6",{"_index":352,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/post.service.ts:9",{"_index":358,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":383,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":385,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":389,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":390,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start",{"_index":467,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":470,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":472,"title":{},"body":{"index.html":{}}}],["started",{"_index":446,"title":{"index.html":{}},"body":{}}],["starter",{"_index":458,"title":{},"body":{"index.html":{}}}],["statements",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":547,"title":{},"body":{"index.html":{}}}],["steps",{"_index":485,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":504,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["sub",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["super",{"_index":243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":231,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":525,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":578,"title":{},"body":{"modules.html":{}}}],["table",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":486,"title":{},"body":{"index.html":{}}}],["test",{"_index":475,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":478,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":477,"title":{},"body":{"index.html":{}}}],["tests",{"_index":473,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":561,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":392,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":393,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(user",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto.email",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(logindto.email",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createuser(email",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.email",{"_index":269,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["this.finduserbyemail(email",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.id",{"_index":267,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.login",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.name",{"_index":268,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["this.postservice.createcomment(id",{"_index":326,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["this.postservice.createpost(body.title",{"_index":313,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["this.postservice.deletepost(id",{"_index":322,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["this.postservice.getallposts",{"_index":308,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["this.postservice.getpostbyid(id",{"_index":310,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["this.postservice.updatepost(id",{"_index":318,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["this.prisma.comment.create",{"_index":379,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.create",{"_index":366,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.delete",{"_index":373,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":367,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":370,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.update",{"_index":372,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.create",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findmany",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostService.html":{}}}],["time",{"_index":540,"title":{},"body":{"index.html":{}}}],["title",{"_index":329,"title":{},"body":{"classes/PostDto.html":{},"injectables/PostService.html":{}}}],["touch",{"_index":569,"title":{},"body":{"index.html":{}}}],["transform",{"_index":311,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["transformer",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/Request.html":{}}}],["try",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["twitter",{"_index":574,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["types/bcrypt",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["unit",{"_index":474,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["unlicensed",{"_index":586,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":232,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unused",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepost",{"_index":278,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["updatepost(@param('id",{"_index":317,"title":{},"body":{"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["updatepost(id",{"_index":294,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["updates",{"_index":549,"title":{},"body":{"index.html":{}}}],["use",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["useguards",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["useguards(jwtauthguard",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":288,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@patch(':id",{"_index":295,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post()@usepipes(new",{"_index":285,"title":{},"body":{"controllers/PostController.html":{}}}],["usepipes",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["usepipes(new",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["user",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"controllers/PostController.html":{},"classes/RegisterDto.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{}}}],["user.email",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["user.id",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["user.name",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["user.password",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto",{"_index":74,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["userdto(user",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["using",{"_index":541,"title":{},"body":{"index.html":{}}}],["validate",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":237,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"interfaces/Request.html":{}}}],["validator",{"_index":263,"title":{},"body":{"classes/LoginDto.html":{},"classes/PostDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":587,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":584,"title":{},"body":{"properties.html":{}}}],["video",{"_index":533,"title":{},"body":{"index.html":{}}}],["visit",{"_index":522,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":536,"title":{},"body":{"index.html":{}}}],["watch",{"_index":468,"title":{},"body":{"index.html":{}}}],["website",{"_index":572,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["working",{"_index":521,"title":{},"body":{"index.html":{}}}],["world",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":551,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":463,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":565,"title":{},"body":{"index.html":{}}}],["you're",{"_index":479,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { PostModule } from './post/post.module';\n\n@Module({\n  imports: [AuthModule, PrismaModule, PostModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getAuthenticatedUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticatedUser(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Req, UseGuards, UsePipes, ValidationPipe, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Request } from 'express';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { LoginDto, RegisterDto, UserDto } from './auth.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) { }\n\n  @Post('login')\n  @UsePipes(new ValidationPipe({ whitelist: true }))\n  async login(@Body() loginDto: LoginDto) {\n    const user = await this.authService.validateUser(loginDto.email, loginDto.password);\n    return this.authService.login(user);\n  }\n\n  @Post('register')\n  @UsePipes(new ValidationPipe({ whitelist: true }))\n  async register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto.email, registerDto.password, registerDto.name);\n  }\n\n  @Get('me')\n  @UseGuards(JwtAuthGuard)\n  getAuthenticatedUser(@Req() request: Request): UserDto {\n    const user = request.user as UserDto | undefined\n    if (!user) throw new UnauthorizedException();\n    return new UserDto(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from '../prisma/prisma.module'; // Import PrismaModule\nimport { JwtStrategy } from './jwt.strategy';\n\nexport const jwtConfig = {\n  secret: process.env.JWT_SECRET || 'secret_key',\n  signOptions: { expiresIn: '1h' },\n} as const;\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register(jwtConfig),\n    PrismaModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(email: string, password: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(email: string, password: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private jwtService: JwtService,\n    private prisma: PrismaService,\n  ) { }\n\n\n\n\n  async createUser(email: string, password: string, name: string) {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      const hashedPassword = await bcrypt.hash(password, salt);\n      const user = await this.prisma.user.create({\n        data: {\n          email,\n          password: hashedPassword,\n          salt,\n          name,\n        },\n      });\n\n      return this.login({ email, id: user.id, name });\n    }\n    catch (error: any) {\n      if ((error as Prisma.PrismaClientKnownRequestError).code === 'P2002')\n        throw new ConflictException('The email is already in use');\n      throw new Error('An error occurred while creating the user');\n    }\n  }\n\n  async findUserByEmail(email: string) {\n    return this.prisma.user.findUnique({ where: { email } });\n  }\n\n  async findAll() {\n    return this.prisma.user.findMany();\n  }\n\n\n  async validateUser(email: string, password: string) {\n    const user = await this.findUserByEmail(email);\n    if (user && (await bcrypt.compare(password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: _, ...result } = user;\n      return result;\n    }\n    throw new UnauthorizedException('Invalid credentials');\n  }\n\n  login(user: { email: string, id: string, name: string }): { access_token: string } {\n    const payload = { email: user.email, sub: user.id, name: user.name };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(email: string, password: string, name: string) {\n    return this.createUser(email, password, name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user) {\n    if (err || !user) {\n      throw new UnauthorizedException();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { email: string; id: string; name: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET || 'secret_key',\n    });\n  }\n\n  validate(payload: { email: string, sub: string, name: string }) {\n    return { email: payload.email, id: payload.sub, name: payload.name };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(6, {message: 'Password must be at least 6 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(6, { message: 'Password must be at least 6 characters long' })\n  password: string;\n}\n\nexport class RegisterDto extends LoginDto {\n  @IsString()\n  @MinLength(2, { message: 'Name must be at least 2 characters long' })\n  name: string;\n}\n\nexport class UserDto {\n  id: string;\n  name: string;\n  email: string;\n  constructor(\n    user: UserDto\n  ) {\n    this.id = user.id;\n    this.name = user.name;\n    this.email = user.email;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createPost\n                            \n                            \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/comments')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(req: Express.Request, body: PostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            Express.Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: string, body: PostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Patch, Delete, Body, Param, UseGuards, Req, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { User } from '@prisma/client';\nimport { PostDto } from './post.dto';\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace Express {\n  interface Request {\n    user?: User;\n  }\n}\n\n@Controller('posts')\nexport class PostController {\n  constructor(private postService: PostService) { }\n\n  @Get()\n  async getAllPosts() {\n    return this.postService.getAllPosts();\n  }\n\n  @Get(':id')\n  async getPostById(@Param('id') id: string) {\n    return this.postService.getPostById(id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  @UsePipes(new ValidationPipe({ transform: true }))\n  async createPost(@Req() req: Express.Request, @Body() body: PostDto) {\n    return this.postService.createPost(body.title, body.content, req.user!.id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  async updatePost(@Param('id') id: string, @Body() body: PostDto) {\n    return this.postService.updatePost(id, body.title, body.content);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  deletePost(@Param('id') id: string) {\n    return this.postService.deletePost(id);\n  }\n\n  @Post(':id/comments')\n  createComment(@Param('id') id: string, @Body() body: { content: string, commenter: string }) {\n    return this.postService.createComment(id, body.content, body.commenter);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDto.html":{"url":"classes/PostDto.html","title":"class - PostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(50, {message: 'Content must be at least 60 characters long'})@MaxLength(500, {message: 'Content must be at most 500 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(10, {message: 'Title must be at least 10 characters long'})@MaxLength(50, {message: 'Title must be at most 50 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MaxLength, MinLength } from 'class-validator';\n\nexport class PostDto {\n  @IsString()\n  @MinLength(10, { message: 'Title must be at least 10 characters long' })\n  @MaxLength(50, { message: 'Title must be at most 50 characters long' })\n  title: string;\n\n  @IsString()\n  @MinLength(50, { message: 'Content must be at least 60 characters long' })\n  @MaxLength(500, { message: 'Content must be at most 500 characters long' })\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPrismaModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { PostController } from './post.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [PostController],\n  providers: [PostService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/post/post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(postId: string, content: string, commenter: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commenter\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(title: string, content: string, authorId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authorId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: string, title: string, content: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/post.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\n\n@Injectable()\nexport class PostService {\n  constructor(private prisma: PrismaService) { }\n\n  async createPost(title: string, content: string, authorId: string) {\n    return this.prisma.post.create({\n      data: { title, content, authorId },\n    });\n  }\n\n  async getAllPosts() {\n    return this.prisma.post.findMany({ include: { author: true } });\n  }\n\n  async getPostById(id: string) {\n    return this.prisma.post.findUnique({ where: { id }, include: { author: true, Comment: true } });\n  }\n\n  async updatePost(id: string, title: string, content: string) {\n    return this.prisma.post.update({\n      where: { id },\n      data: { title, content },\n    });\n  }\n\n  async deletePost(id: string) {\n    try {\n      return await this.prisma.post.delete({ where: { id } })\n    } catch (error) {\n      const e = error as PrismaClientKnownRequestError\n      if (e.code === 'P2025') {\n        throw new NotFoundException('Post not found')\n      }\n      throw error\n    }\n  }\n\n  async createComment(postId: string, content: string, commenter: string) {\n    return this.prisma.comment.create({\n      data: {\n        content,\n        postId,\n        commenter,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(2, {message: 'Name must be at least 2 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LoginDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LoginDto:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(6, {message: 'Password must be at least 6 characters long'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LoginDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LoginDto:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(6, { message: 'Password must be at least 6 characters long' })\n  password: string;\n}\n\nexport class RegisterDto extends LoginDto {\n  @IsString()\n  @MinLength(2, { message: 'Name must be at least 2 characters long' })\n  name: string;\n}\n\nexport class UserDto {\n  id: string;\n  name: string;\n  email: string;\n  constructor(\n    user: UserDto\n  ) {\n    this.id = user.id;\n    this.name = user.name;\n    this.email = user.email;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Controller, Post, Get, Patch, Delete, Body, Param, UseGuards, Req, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { User } from '@prisma/client';\nimport { PostDto } from './post.dto';\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace Express {\n  interface Request {\n    user?: User;\n  }\n}\n\n@Controller('posts')\nexport class PostController {\n  constructor(private postService: PostService) { }\n\n  @Get()\n  async getAllPosts() {\n    return this.postService.getAllPosts();\n  }\n\n  @Get(':id')\n  async getPostById(@Param('id') id: string) {\n    return this.postService.getPostById(id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  @UsePipes(new ValidationPipe({ transform: true }))\n  async createPost(@Req() req: Express.Request, @Body() body: PostDto) {\n    return this.postService.createPost(body.title, body.content, req.user!.id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  async updatePost(@Param('id') id: string, @Body() body: PostDto) {\n    return this.postService.updatePost(id, body.title, body.content);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  deletePost(@Param('id') id: string) {\n    return this.postService.deletePost(id);\n  }\n\n  @Post(':id/comments')\n  createComment(@Param('id') id: string, @Body() body: { content: string, commenter: string }) {\n    return this.postService.createComment(id, body.content, body.commenter);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: UserDto)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.dto.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        UserDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(6, { message: 'Password must be at least 6 characters long' })\n  password: string;\n}\n\nexport class RegisterDto extends LoginDto {\n  @IsString()\n  @MinLength(2, { message: 'Name must be at least 2 characters long' })\n  name: string;\n}\n\nexport class UserDto {\n  id: string;\n  name: string;\n  email: string;\n  constructor(\n    user: UserDto\n  ) {\n    this.id = user.id;\n    this.name = user.name;\n    this.email = user.email;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.dto.ts\n            \n            class\n            PostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @prisma/client : ^6.5.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ yarn installCompile and run the project\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodRun tests\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ yarn install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nPostModule -->\n\nPrismaModule->PostModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConfig   (src/.../auth.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET || 'secret_key',\n  signOptions: { expiresIn: '1h' },\n} as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
